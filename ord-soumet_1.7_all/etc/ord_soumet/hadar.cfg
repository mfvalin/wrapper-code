#
# hadar.cfg
#

function checkXferClass
{
   # check for xfer queue
   # the queue variable overwrites the JobClass
   # [[ "$queue" = "xfer" ]] && [[ "$cpus" == "1" ]] && queue=prod_xfer && t=1750 && ExtraTime=49
   if [[ "$queue" = "xfer" ]] && [[ "$cpus" = "1" ]] ; then
      # by default
      queue=dev_xfer
      # for parallel users
      [[ "${USER}" = "afsipar" ]] || [[ "${USER}" = "afsepar" ]] && queue=prod_xfer
      # for op users
      [[ ${OperationalUser} != "" ]] && queue=prod_xfer

      # max is 30 minutes for now on prod_xfer queue
      [[ "${queue}" = "prod_xfer" ]] && (( t + ExtraTime > 1799 )) && t=1750 && ExtraTime=49

      # for dev queues, we set to max wallclock as before
      [[ "${queue}" != "prod_xfer" ]] && t=1750 && ExtraTime=49
   fi
   [[ "$queue" = "xfer" ]] && [[ "$cpus" != "1" ]] && FatalError "More than 1 cpu or MPI not allowed in transfer jobs"
}

ExtraTime=${ExtraTime:-0}
JobHeader="LoadLeveler5"
Mpi_Network=sn_all
SgeCell="hadar.cmc.ec.gc.ca"
CoresPerNode=32
PREEMPT_OK=1
MaxMemoryPerNode=104448
MemoryPerNode=${MaxMemoryPerNode}
((MemoryPerCpu=MaxMemoryPerNode/CoresPerNode))
JobClass=development
queue=${queue:-${JobClass}}
TrapArch="IBM"
#LLSubmit1=ssh
#LLSubmit2=llsubmit
#LLSubmit3=""
MachPrefix="ibm_"

# on p7, afsipar is assigned prod_ll class rather than production
if [[ "${USER}" = "afsipar" ]] || [[ "${USER}" = "afsepar" ]] ; then
   # put in prod_ll by default
   JobClass=prod_ll

   # check for xfer queue
   # the queue variable overwrites the JobClass
   #[[ "$queue" = "xfer" ]] && [[ "$cpus" == "1" ]] && queue=prod_xfer && t=1750 && ExtraTime=49
fi

checkXferClass

#[[ "$queue" = @* ]]  && queue="${queue#@}"
#[[ "$queue" = "xfer" ]] && [[ "$cpus" == "1" ]] && test "${OperationalUser}"  = "" && queue=development && t=1750 && ExtraTime=49 
#[[ "$queue" = "xfer" ]] && [[ "$cpus" != "1" ]] && FatalError "More than 1 cpu or MPI not allowed in transfer jobs"
#[[ "$queue" = "xfer" ]] && [[ "$cpus" == "1" ]] && test "${OperationalUser}"  != "" && queue=prod_xfer && t=1750 && ExtraTime=49

[[ "$tmpfs" == *[Mm]* ]] && tmpfs=${tmpfs%[Mm]*}
[[ "$tmpfs" == *[Gg]* ]] && tmpfs=${tmpfs%[Gg]*} && ((tmpfs=tmpfs*1024))
[[ "$tmpfs" == *[Kk]* ]] && tmpfs=${tmpfs%[Kk]*} && ((tmpfs=tmpfs/1024))
[[ -n $tmpfs ]] && llv_extra5="@ node_resources = tmpfs(${tmpfs})" && echo RAMDISK requested=${tmpfs}MB

case ${queue} in
lm)
	case ${USER} in
	afsiops|afseeer)
		queue="prod_LM"
		;;
	afsipar|afsepar)
		queue="prod_ll_LM"
		;;
	*)
		queue=""
		;;
	esac
	;;
preemptable|prod_ll|production)
	((MaxMemoryPerNode=104448/2))
	MemoryPerNode=${MaxMemoryPerNode}
	((MemoryPerCpu=MaxMemoryPerNode/CoresPerNode))
	;;
esac
