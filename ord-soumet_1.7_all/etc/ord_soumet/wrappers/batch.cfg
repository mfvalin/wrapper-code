# configuration section for ord_soumet (batch mode)
Set_ex="-${e}x"
test "${clone}" != "0" && seqno=".${seqno}"
test "${clone}"  = "0" && seqno=""
LOG_CMD=true
#OperationalUser=$(IsInList "Yes" "" "${USER}" afsiops afsipar afseeer)

function Sys_ErrorTrap
{
   echo "ABORT: \"ord_soumet ${RememberedArgs}\" failed status=$1 on `hostname`"
   exit $1
}

function Sys_SwitchUser
{
  echo "executing ${0##*/} ${RememberedArgs} as user ${as}"
  echo "${0} ${RememberedArgs}" | ssh -oBatchMode=yes -oStrictHostKeyChecking=no ${as}@${TRUE_HOST} bash --login || FatalError "ssh ${as}@${TRUE_HOST} failed"
  trap "" 0
  exit 0
}

function Sys_SelfResubmit
{
   eval $(grep '^export SelfJobResubmit=' ${filnam} | head -1)
   echo "JOB file has wrappers, submitting using ${SelfJobResubmit} as user ${as:-${USER}}"
   echo ". /etc/profile ; ${SelfJobResubmit}" | ssh -oBatchMode=yes -oStrictHostKeyChecking=no ${as:-${USER}}@${TRUE_HOST} ksh
   trap "" 0
   exit 0
}


function Sys_SetJobRemove
{
 echo Sys_SetJobRemove >/dev/null
}

function Sys_GridEngineHeader
{
 echo Sys_GridEngineHeader >/dev/null
}

function Sys_LoadLevelerHeader
{
 echo Sys_LoadLevelerHeader >/dev/null
}

function Sys_NoCfgError
{
   printf "WARNING: specific configuration file \n'${1}'\nnot found, USING default configuration\n"
}

function Sys_JobHeader
{
   SystemPath=""
}

function Sys_AddWrapperHeader
{
   jobname=$1
   dest_file=$2
   listing_dir=$3
   cat >> ${dest_file} << END

   oisday=${listing_dir}/${jobname}.dayfile\$$
   jobout=${listing_dir}/${jobname}.pgmout\$$
   set ${Set_ex}
   export POST_JOB=\$HOME/POST_${jn}_${ppid}
END
}

function Sys_AddWrapper
{
   jobname=$1
   source_file=$2
   dest_file=$3
   listing_dir=$4
   trap_arch=${5:-LINUX}
   config_dir=$6

   Sys_AddWrapperHeader ${jobname} ${dest_file} ${listing_dir}
   wrapperPrefix=""
   silentPrefix=""

   topWrapper=${config_dir}/wrappers/${wrapperPrefix}${trap_arch}.${silentPrefix}trap_top
   bottomWrapper=${config_dir}/wrappers/${wrapperPrefix}${trap_arch}.trap_bottom

   if ! grep -q "^[ ]*trap.*exit" $source_file ; then
      # add the trap
      cat ${topWrapper} >> ${dest_file}

      # dot the job content
      echo ". ${job_with_wrapper} ${args}" >> ${dest_file}

      # add the trap end processing
      cat "${bottomWrapper}" >> ${dest_file}
   else
      echo ". ${job_with_wrapper} ${args}" >> ${dest_file}
   fi
}

function Sys_CreateDirs
{
   for target in wrapped batch jobinfo ; do 
      mkdir -p ${wrapdir}/${target}
      test -d  ${wrapdir}/${target}        || FatalError "Cannot access directory '${wrapdir}/${target}'"
   done
}

function Sys_SetWrapFiles
{
   job_with_wrapper=${job_with_wrapper_dir}/${jn}.wrapped.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
   job_batch=${job_batch_dir}/${jn}.${ppid}-${mach}-$(date +%F%T | sed 's/[-:]//g')
   LaJobLink=${job_batch_dir}/${jn}-${mach}.link
}
function Sys_PostSubmit
{
   echo Sys_PostSubmit >/dev/null
}
