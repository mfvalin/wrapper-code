#!/bin/bash
#
# pollux.cfg

JobHeader="GridEngine"
SgeCell="pollux.cmc.ec.gc.ca"
mach=pollux
TrapArch="LINUX"
SharedExclusive=${share:-s}
waste=${waste:-75}
MachPrefix="Linux_"
UseHT=",res_ht=false"
queue=${queue:-dev}
ParallelEnvironment=""
JobClass=""

CpusPerNode=8
MaxMemoryPerNode=44800
case ${queue} in
prod*)
	MaxMemoryPerNode=32000
	;;
test48)
	CpusPerNode=48
	MaxMemoryPerNode=216000
	;;
esac
((MemoryPerCpu=MaxMemoryPerNode/CpusPerNode))
# MaxNodeMemory redundant with MaxMemoryPerNode
MaxNodeMemory=${MaxMemoryPerNode}
ImmediateMem=256  # memory allowed for "immediate" submit

[[ "${memunits}" == "M" ]] && ((cm<256)) && ((cm=256)) && echo INFO: bumping memory to 256MB
[[ "${memunits}" == "K" ]] && ((cm<256000)) && ((cm=256000)) && echo INFO: bumping memory to 256MB

[[ "$tmpfs" == *[Mm]* ]] && tmpfs=${tmpfs%[Mm]*}
[[ "$tmpfs" == *[Gg]* ]] && tmpfs=${tmpfs%[Gg]*} && ((tmpfs=tmpfs*1024))
[[ "$tmpfs" == *[Kk]* ]] && tmpfs=${tmpfs%[Kk]*} && ((tmpfs=tmpfs/1024))


OMP_NUM_THREADS=${OMP_NUM_THREADS:-1}
((MinCpusPerNode=OMP_NUM_THREADS))
((NeededSlots=TotalCpus/OMP_NUM_THREADS))

((MaxMemoryReq=OMP_NUM_THREADS*MemoryPerCpu))  # memory is in MegaBytes
((MaxMemoryNeed=${cm:-0}${MemMultiplier}/1000))
((MaxMemoryNeed>MaxNodeMemory)) && \
	FatalError "requesting too much memory (${MaxMemoryNeed}MB) maximum possible is ${MaxNodeMemory}MB"

((SlotSize=OMP_NUM_THREADS))
((MaxMemoryNeed > MaxMemoryReq)) && ((SlotSize=(MaxMemoryNeed+MemoryPerCpu-1)/MemoryPerCpu)) && \
echo WARNING: augmenting slot size from $OMP_NUM_THREADS to $SlotSize because of large memory request
((SlotsPerNode=CpusPerNode/SlotSize))
((SlotSize=CpusPerNode/SlotsPerNode))
((MinCpusPerNode=SlotSize))
#((TotalCpus=NeededSlots*SlotSize))
((CpusReallyNeeded=NeededSlots*SlotSize))   # computed here and also used inside ord_soumet

#  [[ $t -le 200 && ${cm}${MemMultiplier} -lt 1500000 ]] && UseHT=""

if [ "${queue}" != "test48" ]; then
	if [ "${CpusReallyNeeded}" -gt 4 -o "${SharedExclusive}" = "e" ]; then
		# 5 or more cpus (or no sharing), use full nodes, adjust parameters accordingly
		echo "INFO: node(s) will not be shared with other jobs"
		((CpusReallyNeeded=((CpusReallyNeeded+CpusPerNode-1)/CpusPerNode)*CpusPerNode))
		((NeededSlots=CpusReallyNeeded/CpusPerNode))
		((MaxMemoryNeed=MaxNodeMemory))
		((MinCpusPerNode=CpusPerNode))
		((SlotSize=CpusPerNode))
		((cm=MaxMemoryNeed))
		((waste=100))
	fi
fi

if [ "${CpusReallyNeeded}" -gt 1 ]; then
	mpi="mpi"
	((NeededSlots=(CpusReallyNeeded+MinCpusPerNode-1)/MinCpusPerNode))
	((CpusReallyNeeded=NeededSlots*MinCpusPerNode))
	((MaxMemoryNeed=MaxMemoryNeed*(MinCpusPerNode/SlotSize)))
	((cm=cm*(MinCpusPerNode/SlotSize)))
	if [ "${v}" != "" ]; then
		echo "INFO: there are $SlotsPerNode slots of size $SlotSize per node, CpusReallyNeeded=$CpusReallyNeeded"
	fi
fi

spri=""
if [ -n "$prio" -a "${queue%.*}" = "prod" ]; then 
	spri=",spri=$prio"
fi

#sge_extra5="-l res_cpus=${MinCpusPerNode},res_mem=${MaxMemoryNeed}$UseHT,h_rss=${cm}${memunits}"
case "${queue}" in
prod*)
	sge_extra5="-l res_mem=${MaxMemoryNeed}${spri}${wallclock}"
	;;
*)
	sge_extra5="-l res_cpus=${MinCpusPerNode},res_mem=${MaxMemoryNeed}$UseHT,h_vmem=${cm}${memunits}${spri}${wallclock}"
	;;
esac

case "${queue}" in
@*)
	JobClass="${queue#@}"
	ParallelEnvironment=""
	;;
dev)
	ParallelEnvironment="dev"
	#sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
fexfer*)
	if [ "${OperationalUser}" = "yes" ]; then
		JobClass="prod.xxfer"
		sge_extra5="${sge_extra5},res_cpu_shares=100"
	else
		JobClass="xxfer"
	fi
	ParallelEnvironment=""
	;;
prod)
	ParallelEnvironment="prod"
	#wallclock=",res_wallclock=$t"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
prod.daemon)
	JobClass="$queue"
	ParallelEnvironment=""
	#t="INFINITY"
	t=7776000
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
prod.xfer)
	JobClass="$queue"
	ParallelEnvironment=""
	sge_extra5="${sge_extra5},res_cpu_shares=100"
	;;
prod.xxfer)
	JobClass="$queue"
	ParallelEnvironment=""
	sge_extra5="${sge_extra5},res_cpu_shares=100"
	;;
test)
	ParallelEnvironment="test"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
test-nousr)
	ParallelEnvironment="test-nousr"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
test48)
	ParallelEnvironment="test48"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
xfer*)
	JobClass="xfer"
	ParallelEnvironment=""
	;;
xxfer*)
	JobClass="xxfer"
	ParallelEnvironment=""
	;;
esac

if [ "${tmpfs}" != "" ]; then
	sge_extra5="${sge_extra5},res_tmpfs=${tmpfs}"
	# reset before sending to job header script
	tmpfs=""
fi

echo "JOB profile: slots=$NeededSlots, Memory per slot=${MaxMemoryNeed}(h_vmem=${cm}${memunits}), cpus per slot=${MinCpusPerNode} $UseHT"
