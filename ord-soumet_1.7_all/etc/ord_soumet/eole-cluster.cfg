#!/bin/bash
#
# eole-cluster.cfg

JobHeader="GridEngine"
SgeCell="eole-cluster.cmc.ec.gc.ca"
mach=eole-cluster
TrapArch="LINUX"
SharedExclusive=${share:-s}
waste=${waste:-75}
MachPrefix="Linux_"
UseHT=",res_ht=false"
queue=${queue:-dev}
ParallelEnvironment=""
JobClass=""

CpusPerNode=16
MaxMemoryPerNode=30000
((MemoryPerCpu=MaxMemoryPerNode/CpusPerNode))
# MaxNodeMemory redundant with MaxMemoryPerNode
MaxNodeMemory=${MaxMemoryPerNode}
ImmediateMem=256  # memory allowed for "immediate" submit

[[ "${memunits}" == "M" ]] && ((cm<256)) && ((cm=256)) && echo INFO: bumping memory to 256MB
[[ "${memunits}" == "K" ]] && ((cm<256000)) && ((cm=256000)) && echo INFO: bumping memory to 256MB

[[ "$tmpfs" == *[Mm]* ]] && tmpfs=${tmpfs%[Mm]*}
[[ "$tmpfs" == *[Gg]* ]] && tmpfs=${tmpfs%[Gg]*} && ((tmpfs=tmpfs*1024))
[[ "$tmpfs" == *[Kk]* ]] && tmpfs=${tmpfs%[Kk]*} && ((tmpfs=tmpfs/1024))


OMP_NUM_THREADS=${OMP_NUM_THREADS:-1}
((MinCpusPerNode=OMP_NUM_THREADS))
((NeededSlots=TotalCpus/OMP_NUM_THREADS))

((MaxMemoryReq=OMP_NUM_THREADS*MemoryPerCpu))  # memory is in MegaBytes
((MaxMemoryNeed=${cm:-0}${MemMultiplier}/1000))
((MaxMemoryNeed>MaxNodeMemory)) && \
	FatalError "requesting too much memory (${MaxMemoryNeed}MB) maximum possible is ${MaxNodeMemory}MB"

((SlotSize=OMP_NUM_THREADS))
((MaxMemoryNeed > MaxMemoryReq)) && ((SlotSize=(MaxMemoryNeed+MemoryPerCpu-1)/MemoryPerCpu)) && \
echo WARNING: augmenting slot size from $OMP_NUM_THREADS to $SlotSize because of large memory request
((SlotsPerNode=CpusPerNode/SlotSize))
((SlotSize=CpusPerNode/SlotsPerNode))
((MinCpusPerNode=SlotSize))
#((TotalCpus=NeededSlots*SlotSize))
((CpusReallyNeeded=NeededSlots*SlotSize))   # computed here and also used inside ord_soumet

if [ "${queue}" != "test48" ]; then
	if [ "${CpusReallyNeeded}" -gt 4 -o "${SharedExclusive}" = "e" ]; then
		# 5 or more cpus (or no sharing), use full nodes, adjust parameters accordingly
		echo "INFO: node(s) will not be shared with other jobs"
		((CpusReallyNeeded=((CpusReallyNeeded+CpusPerNode-1)/CpusPerNode)*CpusPerNode))
		((NeededSlots=CpusReallyNeeded/CpusPerNode))
		((MaxMemoryNeed=MaxNodeMemory))
		((MinCpusPerNode=CpusPerNode))
		((SlotSize=CpusPerNode))
		((cm=MaxMemoryNeed))
		((waste=100))
	fi
fi

if [ "${CpusReallyNeeded}" -gt 1 ]; then
	mpi="mpi"
	((NeededSlots=(CpusReallyNeeded+MinCpusPerNode-1)/MinCpusPerNode))
	((CpusReallyNeeded=NeededSlots*MinCpusPerNode))
	((MaxMemoryNeed=MaxMemoryNeed*(MinCpusPerNode/SlotSize)))
	((cm=cm*(MinCpusPerNode/SlotSize)))
	if [ "${v}" != "" ]; then
		echo "INFO: there are $SlotsPerNode slots of size $SlotSize per node, CpusReallyNeeded=$CpusReallyNeeded"
	fi
	#  test "${v}" != "" && echo ParallelEnvironment=${ParallelEnvironment} CpusPerNode=${CpusPerNode}
fi

sge_extra5="-l res_mem=${MaxMemoryNeed}${spri}${wallclock}"

case "${queue}" in
@*)
	JobClass="${queue#@}"
	ParallelEnvironment=""
	;;
dev)
	ParallelEnvironment="dev"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
benchmark)
	ParallelEnvironment="benchmark"
	#wallclock=",res_wallclock=$t"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
test)
	ParallelEnvironment="test"
	sge_extra5="${sge_extra5},res_cpus=${MinCpusPerNode}"
	;;
xfer*)
	JobClass="xfer"
	ParallelEnvironment=""
	sge_extra5="${sge_extra5},res_cpu_shares=100"
	;;
esac

if [ "${tmpfs}" != "" ]; then
	sge_extra5="${sge_extra5},res_tmpfs=${tmpfs}"
	# reset before sending to job header script
	tmpfs=""
fi

echo "JOB profile: slots=$NeededSlots, Memory per slot=${MaxMemoryNeed}(h_vmem=${cm}${memunits}), cpus per slot=${MinCpusPerNode} $UseHT"
